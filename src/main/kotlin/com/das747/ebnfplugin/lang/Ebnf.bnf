{
  parserClass="com.das747.ebnfplugin.lang.parser.EbnfParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Ebnf"
  psiImplClassSuffix="Impl"
  psiPackage="com.das747.ebnfplugin.lang.psi"
  psiImplPackage="com.das747.ebnfplugin.lang.psi.impl"

  elementTypeHolderClass="com.das747.ebnfplugin.lang.psi.EbnfTypes"
  elementTypeClass="com.das747.ebnfplugin.lang.psi.EbnfElementType"
  tokenTypeClass="com.das747.ebnfplugin.lang.psi.EbnfTokenType"

  tokens=[
     ASSN=":="
     SEMI=";"
     OR="|"
     CURL_L="{"
     CURL_R="}"
     SQR_L="["
     SQR_R="]"
     BRACE_L="("
     BRACE_R=")"

     space='regexp:\s+'
     comment='regexp://.*'
     number='regexp:\d+(\.\d*)?'
     id='regexp:\p{Alpha}\w*'
     string="regexp:('([^'\\\n\r]|\\.)*'?|\"([^\"\\\r\n]|\\.)*\"?)"
  ]
  implements(".*_expr")="com.das747.ebnfplugin.lang.psi.tree.EbnfTreeNode"
  extends(".*_expr")=expr
  mixin(".*_expr")="com.das747.ebnfplugin.lang.psi.impl.EbnfTreeNodeImplMixin"
}

root ::= root_item *
private root_item ::= !<<eof>> rule {pin=1}
rule ::= non_terminal ':=' rule_body ';'{
  pin=2
  mixin="com.das747.ebnfplugin.lang.psi.impl.EbnfRuleImplMixin"
  implements="com.das747.ebnfplugin.lang.psi.EbnfNamedElement"

}
private rule_body ::= expr {recoverWhile=rule_recover}
private rule_recover ::= !(';' | id ':=')
expr ::= non_alternative_expr alternative_expr ?
left alternative_expr ::= alternative_clause +
private alternative_clause ::= '|' non_alternative_expr {pin=1}
private non_alternative_expr ::= atom_expr concat_expr?   {recoverWhile=basic_recover}
private alternative_recover ::= !("|" | ";" | id ':=')
left concat_expr ::= (atom_expr) +
private atom_expr ::= (optional_expr | multiple_expr | group_expr | terminal | non_terminal) !(':=')

//optional_expr ::= '[' optional_body ']'  {pin=2}
//private optional_body ::= expr {recoverWhile=optional_recover}
//private optional_recover ::= !("|" | ";" | "]")

//multiple_expr ::= '{' multiple_body '}'   {pin=2}
//private multiple_body ::= expr {recoverWhile=multiple_recover}
//private multiple_recover ::= !("|" | ";" | "}")


optional_expr ::= '[' expr ']'  {pin=2}
multiple_expr ::= '{' expr '}'   {pin=2}
private group_expr ::= '(' expr ')'  {pin=2}


non_terminal ::= id {
  methods=["/id"]
  extends=expr
  implements="com.das747.ebnfplugin.lang.psi.tree.EbnfLeafNode"
  mixin="com.das747.ebnfplugin.lang.psi.impl.EbnfNonTerminalImplMixin"
}
terminal ::= string {
  extends=expr
  implements="com.das747.ebnfplugin.lang.psi.tree.EbnfLeafNode"
  mixin="com.das747.ebnfplugin.lang.psi.impl.EbnfTerminalImplMixin"
}
private basic_recover ::= !("]" | ")" | "}" | "|") rule_recover